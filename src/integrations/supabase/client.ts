
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://yfufpcxkerovnijhodrr.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlmdWZwY3hrZXJvdm5pamhvZHJyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIyNjI3ODYsImV4cCI6MjA1NzgzODc4Nn0.1x7WAfVIvlm-KPy2q4eFylaVtdc5_ZJmlis5AMJ-Izc";

// Create a supabase client with auto-refresh and retries
export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
    },
    global: {
      fetch: (url, options) => {
        console.log(`Supabase request to: ${url}`);
        return fetch(url, options);
      }
    },
    db: {
      schema: 'public',
    },
  }
);

// Helper to detect if Supabase is available
export const checkSupabaseConnection = async () => {
  try {
    console.log('Checking Supabase connection...');
    const { data, error } = await supabase.from('call_transcripts').select('id').limit(1);
    
    if (error) {
      console.error('Supabase connection error (call_transcripts):', error);
      return { connected: false, error };
    }
    
    console.log('Supabase connection successful, found data:', data);
    return { connected: true, error: null };
  } catch (err) {
    console.error('Supabase connection error (exception):', err);
    return { connected: false, error: err };
  }
};

// Generate a proper anonymous user ID
export const generateAnonymousUserId = () => {
  // Generate a unique identifier in the format "anonymous-{uuid}"
  const uuid = crypto.randomUUID ? crypto.randomUUID() : Math.random().toString(36).substring(2, 15);
  const anonymousId = `anonymous-${uuid}`;
  console.log('Generated anonymous user ID:', anonymousId);
  return anonymousId;
};
