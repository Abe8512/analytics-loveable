
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from 'sonner';

const SUPABASE_URL = "https://yfufpcxkerovnijhodrr.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlmdWZwY3hrZXJvdm5pamhvZHJyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDIyNjI3ODYsImV4cCI6MjA1NzgzODc4Nn0.1x7WAfVIvlm-KPy2q4eFylaVtdc5_ZJmlis5AMJ-Izc";

// Create a supabase client with auto-refresh and retries
export const supabase = createClient<Database>(
  SUPABASE_URL,
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
    },
    global: {
      fetch: async (url, options) => {
        console.log(`Supabase request to: ${url}`);
        
        try {
          // Implement retries with exponential backoff
          const maxRetries = 3;
          let retryCount = 0;
          let lastError;
          
          while (retryCount < maxRetries) {
            try {
              const response = await fetch(url, options);
              
              // Log successful requests
              if (response.ok) {
                console.log(`Supabase request successful: ${url}`);
              } else {
                console.warn(`Supabase request failed with status ${response.status}: ${url}`);
                // Only log the first few characters of the response for debugging
                const responseText = await response.clone().text();
                console.warn(`Response preview: ${responseText.substring(0, 200)}${responseText.length > 200 ? '...' : ''}`);
              }
              
              return response;
            } catch (error) {
              console.error(`Supabase fetch attempt ${retryCount + 1} failed:`, error);
              lastError = error;
              
              // Exponential backoff
              const delay = Math.min(1000 * Math.pow(2, retryCount), 10000);
              await new Promise(resolve => setTimeout(resolve, delay));
              retryCount++;
            }
          }
          
          // If we've exhausted retries, throw the last error
          throw lastError;
        } catch (error) {
          console.error(`Supabase request failed after retries: ${url}`, error);
          throw error;
        }
      }
    },
    db: {
      schema: 'public',
    },
  }
);

// Improved helper to detect if Supabase is available
export const checkSupabaseConnection = async () => {
  try {
    console.log('Checking Supabase connection...');
    
    // First try a simple ping query that should be fast
    const { data: pingData, error: pingError } = await supabase
      .from('call_transcripts')
      .select('id')
      .limit(1)
      .maybeSingle();
    
    if (pingError) {
      console.error('Supabase connection error (ping):', pingError);
      return { connected: false, error: pingError };
    }
    
    // If ping succeeded, try a more substantial query
    const { data, error } = await supabase
      .from('call_transcripts')
      .select('id')
      .limit(1);
    
    if (error) {
      console.error('Supabase connection error (call_transcripts):', error);
      return { connected: false, error };
    }
    
    console.log('Supabase connection successful, found data:', data);
    return { connected: true, error: null };
  } catch (err) {
    console.error('Supabase connection error (exception):', err);
    // Show a toast notification when connection fails
    toast.error("Database connection failed", {
      description: "Check your network connection or try again later",
    });
    return { connected: false, error: err };
  }
};

// Generate a proper anonymous user ID using the uuid library
export const generateAnonymousUserId = () => {
  // Import the uuid library to generate proper UUIDs
  const { v4: uuidv4 } = require('uuid');
  // Generate a unique identifier in the format "anonymous-{uuid}"
  const anonymousId = `anonymous-${uuidv4()}`;
  console.log('Generated anonymous user ID:', anonymousId);
  return anonymousId;
};
